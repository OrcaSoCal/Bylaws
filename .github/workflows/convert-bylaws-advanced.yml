name: Convert Bylaws PDF to Markdown (Advanced)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Bylaws.pdf'
  pull_request:
    paths:
      - 'Bylaws.pdf'
  workflow_dispatch:  # Allow manual triggering

jobs:
  convert-pdf:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils
        echo "‚úÖ System dependencies installed"
    
    - name: Verify conversion script exists
      run: |
        if [ ! -f "pdf_to_markdown.py" ]; then
          echo "‚ùå Error: pdf_to_markdown.py not found"
          exit 1
        fi
        echo "‚úÖ Conversion script found"
    
    - name: Verify PDF file exists
      run: |
        if [ ! -f "Bylaws.pdf" ]; then
          echo "‚ùå Error: Bylaws.pdf not found"
          exit 1
        fi
        echo "‚úÖ Bylaws.pdf found"
        echo "üìä PDF size: $(ls -lh Bylaws.pdf | awk '{print $5}')"
        echo "üìÖ PDF modified: $(stat -c %y Bylaws.pdf)"
    
    - name: Test conversion script
      run: |
        python3 -c "
        import sys
        import ast
        try:
            with open('pdf_to_markdown.py', 'r') as f:
                source = f.read()
            ast.parse(source)
            print('‚úÖ Conversion script syntax is valid')
        except SyntaxError as e:
            print(f'‚ùå Syntax error in conversion script: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Error in conversion script: {e}')
            sys.exit(1)
        "
    
    - name: Convert PDF to Markdown
      id: convert
      run: |
        echo "üîÑ Starting PDF to markdown conversion..."
        python3 pdf_to_markdown.py Bylaws.pdf Bylaws.md
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Conversion completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Conversion failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Validate markdown output
      if: steps.convert.outputs.success == 'true'
      run: |
        if [ ! -f "Bylaws.md" ]; then
          echo "‚ùå Error: Bylaws.md was not created"
          exit 1
        fi
        
        # Check if markdown has reasonable content
        line_count=$(wc -l < Bylaws.md)
        if [ $line_count -lt 50 ]; then
          echo "‚ùå Warning: Bylaws.md seems too short ($line_count lines)"
        else
          echo "‚úÖ Bylaws.md created with $line_count lines"
        fi
        
        # Check for basic markdown structure
        if grep -q "^# " Bylaws.md; then
          echo "‚úÖ Found main heading"
        else
          echo "‚ö†Ô∏è Warning: No main heading found"
        fi
        
        if grep -q "^## " Bylaws.md; then
          echo "‚úÖ Found section headings"
        else
          echo "‚ö†Ô∏è Warning: No section headings found"
        fi
        
        echo "üìä Markdown size: $(ls -lh Bylaws.md | awk '{print $5}')"
    
    - name: Check for changes
      if: steps.convert.outputs.success == 'true'
      id: changes
      run: |
        if git diff --quiet Bylaws.md; then
          echo "‚ÑπÔ∏è No changes to Bylaws.md"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "üîÑ Changes detected in Bylaws.md"
          echo "changed=true" >> $GITHUB_OUTPUT
          
          # Show a preview of changes
          echo "üìã Changes preview:"
          git diff --stat Bylaws.md
        fi
    
    - name: Commit and push changes (Push events only)
      if: steps.convert.outputs.success == 'true' && steps.changes.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Bylaws.md
        
        # Create a detailed commit message
        commit_msg="Auto-update Bylaws.md from Bylaws.pdf

        ü§ñ Automatically converted PDF to markdown
        üìÑ Source: Bylaws.pdf
        üõ†Ô∏è Generated by GitHub Actions workflow
        üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        Changes:
        $(git diff --stat Bylaws.md | tail -1)"
        
        git commit -m "$commit_msg"
        git push
        
        echo "‚úÖ Changes committed and pushed"
    
    - name: Create Pull Request comment (PR events only)
      if: steps.convert.outputs.success == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the generated markdown file
          const markdownContent = fs.readFileSync('Bylaws.md', 'utf8');
          const lineCount = markdownContent.split('\n').length;
          const fileSize = fs.statSync('Bylaws.md').size;
          
          // Create a comment
          const comment = `## üìÑ PDF to Markdown Conversion Results
          
          ‚úÖ **Status**: Conversion completed successfully
          
          üìä **Generated File Details**:
          - **File**: Bylaws.md
          - **Size**: ${(fileSize / 1024).toFixed(1)} KB
          - **Lines**: ${lineCount}
          
          üîç **Preview** (first 10 lines):
          \`\`\`markdown
          ${markdownContent.split('\n').slice(0, 10).join('\n')}
          \`\`\`
          
          üí° **Note**: This is a preview of the converted markdown. The full file will be available after the PR is merged.
          
          üõ†Ô∏è **Conversion Details**:
          - Source: Bylaws.pdf
          - Tool: Custom Python script with poppler-utils
          - Triggered by: Pull Request`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create workflow summary
      if: always()
      run: |
        echo "## üìÑ PDF to Markdown Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.convert.outputs.success }}" == "true" ]; then
          echo "‚úÖ **Status**: Conversion completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Status**: Conversion failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìä **File Details**:">> $GITHUB_STEP_SUMMARY
        echo "- **PDF Size**: $(ls -lh Bylaws.pdf | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "Bylaws.md" ]; then
          echo "- **Markdown Size**: $(ls -lh Bylaws.md | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
          echo "- **Markdown Lines**: $(wc -l < Bylaws.md)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîÑ **Changes**: ${{ steps.changes.outputs.changed == 'true' && 'Bylaws.md was updated' || 'No changes detected' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üõ†Ô∏è **Tools Used**:">> $GITHUB_STEP_SUMMARY
        echo "- Python 3.11" >> $GITHUB_STEP_SUMMARY
        echo "- poppler-utils (pdftotext)" >> $GITHUB_STEP_SUMMARY
        echo "- Custom conversion script" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚è∞ **Run Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
